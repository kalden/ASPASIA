package modelCreation;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Map;
import java.util.StringTokenizer;

import spartanLink.GenerateSpartanLHCFile;
import spartanLink.SpartanUtilities;
import xmlFileUtilities.FileCreationUtilities;
import xmlFileUtilities.XMLFileUtilities;

/**
 * Program to create simulation parameter files for latin-hypercube analysis.
 * Steps in this process: 1. Generate a latin-hypercube sample for a subset of
 * simulation parameters using spartan 2. Set the location of the sample above
 * (the csv file), the names of the parameters of interest, a location of a
 * parameter file at which parameters are at calibrated values, the number of
 * samples taken, and a location for the output files, in the main method below
 * 3. Run this java program. A parameter file will be created for each sample
 * set in the analysis, with parameters of interest at their values set in the
 * hypercube, and those not of interest set from their calibrated value
 * 
 * 
 * @author Kieran Alden, York Computational Immunology Lab
 * @version 1.0
 * @since February 2015
 *
 */
public class Create_LHC_Models
{
    /**
     * Whether we are creating Repast Compatible files: TO COME IN VERSION 2
     */
    // public boolean repastCompatible;

    /**
     * Whether we are creating SBML files
     */
    public boolean sbmlCompatible;

    /**
     * The original, calibrated parameter file
     */
    public String paramsMetaDataFilePath;

    /**
     * Folder where you want adapted parameter files to be stored
     */
    String paramFileOutputFolder;

    /**
     * Number of parameter samples generated by spartan
     */
    int numSamples;

    /**
     * LHC Algorithm to use
     */
    String lhcAlgorithm;

    /**
     * Number of times to run each simulation
     */
    int numReplicates;

    /**
     * Program to create parameter files for latin-hypercube experiments. Takes
     * the spreadsheet generated in spartan and replaces the values of
     * parameters of interest in a calibration parameter file with the perturbed
     * values. Does this for all sample sets generated.
     * 
     * @param settingsFile Full path to the sensitivity analysis XML settings
     *            file
     */
    public Create_LHC_Models(String settingsFile)
    {

	// Read settings file
	XMLFileUtilities.readSettingsFile(settingsFile);

	// Determine repast and SBML compatibility: To come in Version 2
	// this.repastCompatible =
	// XMLFileUtilities.getParamBoolean("repastCompatible");
	this.sbmlCompatible = XMLFileUtilities.getParamBoolean("sbmlFormat");

	// The original, calibrated parameter file
	this.paramsMetaDataFilePath = XMLFileUtilities.getParam("pathToSimulationParameterFile");
	// System.out.println(this.paramsMetaDataFilePath);

	// Folder where you want adapted parameter files to be stored
	this.paramFileOutputFolder = XMLFileUtilities.getParam("parameterFileOutputFolder")
	        + "/LHC";

	// Make that folder
	new File(this.paramFileOutputFolder).mkdirs();

	// Now determine if the user wants to generate samples, they may not,
	// and provide a sample file already
	// This can be determined by seeing what is in the
	// lhcPreGeneratedSampleFile tag
	String preGeneratedParamValues = XMLFileUtilities.getParam("lhcPreGeneratedSampleFile");

	if (preGeneratedParamValues == null)
	{
	    // If so we need to generate the samples, so read in the relevant
	    // tags and write the R script

	    // Now to; read in the information about parameters being analysed
	    XMLFileUtilities.readParameterInfo("LHC");

	    // Number of parameter sets generated
	    this.numSamples = Integer.parseInt(XMLFileUtilities.getParam("numberparameterSamples"));

	    // algorithm to use
	    this.lhcAlgorithm = XMLFileUtilities.getParam("algorithm");

	    // Generate the spartan R script
	    GenerateSpartanLHCFile.CreateSpartanLHCScript(this.paramFileOutputFolder,
		    XMLFileUtilities.parametersAnalysed, this.numSamples, XMLFileUtilities.minVals,
		    XMLFileUtilities.maxVals, this.lhcAlgorithm);

	    // set the path to the generated spartan file specifying the
	    // parameter sampling
	    // SpartanUtilities.spartanScript =
	    // XMLFileUtilities.getParam("lhc_spartan_script");
	    SpartanUtilities.spartanScript = this.paramFileOutputFolder + "/LHC_Sampling.R";

	    // Generate the sample in R
	    int runResult = SpartanUtilities.generateParameterSamples();

	    if (runResult == 0)
	    {
		// Send null as we will use the parameter samples generated by R
		this.writeLHCParameterFiles(null);
		System.out.println("LHC Parameter Files Generated");
	    }
	    else
	    {
		System.out.println("Problem Creating Parameter Files in Spartan");
	    }
	}
	else
	{
	    // We're going to generate the parameter name arraylist, so these
	    // don't have to be specified in the XML file
	    // So read in the first line of the parameter file
	    // We're also going to count the number of samples in the file to
	    // save this input too
	    try
	    {
		XMLFileUtilities.parametersAnalysed = new ArrayList<String>();
		BufferedReader br = new BufferedReader(new FileReader(preGeneratedParamValues));
		String parameterNames = br.readLine();
		StringTokenizer st = new StringTokenizer(parameterNames, ",");
		while (st.hasMoreTokens())
		{
		    XMLFileUtilities.parametersAnalysed.add(st.nextToken());
		}

		// Now count the remaining number of lines
		int sampleCount = 0;
		while (br.readLine() != null)
		    sampleCount++;
		// Close the reader
		br.close();

		// Set the number of samples
		this.numSamples = sampleCount;

		// Send the address of the file to use in the sampling and write
		// the files
		this.writeLHCParameterFiles(preGeneratedParamValues);
		System.out.println("LHC Parameter Files Generated");
	    }
	    catch (Exception e)
	    {
		e.printStackTrace();
	    }
	}

	// STUB FOR REPAST IN VERSION 2
	// Now if Repast, we're going to copy the model files and change the
	// file sink file to
	// the correct output directory
	/*
	 * if (this.repastCompatible) { // Null as no map of parameter file
	 * counts, as with robustness // analysis
	 * 
	 * @SuppressWarnings("unused") Setup_Repast_Experiment_Files sref = new
	 * Setup_Repast_Experiment_Files( this.paramFileOutputFolder, "LHC",
	 * null); }
	 */
    }

    /**
     * Write the parameter files for each value set created by Spartan
     * 
     * @param preGeneratedValues If not using spartan to generate the values,
     *            this contains the full address of a file containing the values
     *            to put in the parameter files
     */
    public void writeLHCParameterFiles(String preGeneratedValues)
    {
	try
	{
	    String lhcDesignFile;
	    if (preGeneratedValues == null)
	    {
		// Read in the spartan generated latin-hypercube file
		lhcDesignFile = this.paramFileOutputFolder + "/LHC_Parameters_for_Runs.csv";
	    }
	    else
	    {
		// Use the provided file
		lhcDesignFile = preGeneratedValues;
	    }

	    // Now read in either of these files
	    BufferedReader br = new BufferedReader(new FileReader(lhcDesignFile));

	    // Firstly, skip over the first line - the parameter headings
	    String strLine = br.readLine();

	    // Now generate the parameter files for all perturbations generated
	    // in the hypercube
	    for (int i = 0; i < this.numSamples; i++)
	    {
		// Read in the line of parameters
		strLine = br.readLine();

		// Make the parameter name-value map so this is ready for
		// processing in parameter
		// files
		Map<String, Double> parameterValMap = FileCreationUtilities
		        .makeParameterValMap(strLine);

		// STUB FOR VERSION 2
		// Create the parameter file
		// Now call the right script dependent on Repast and SBML
		// Compatibility
		/*
	         * if (this.repastCompatible) { // In repast these go in their
	         * own folders, so make a // folder: new
	         * File(this.paramFileOutputFolder + "/" + (i + 1)).mkdirs();
	         * WriteParameterFile_Repast
	         * .writeSimParameterFiles(this.paramsMetaDataFilePath,
	         * parameterValMap, XMLFileUtilities.parametersAnalysed,
	         * XMLFileUtilities.parameterType, this.paramFileOutputFolder +
	         * "/" + (i + 1), i, ""); }
	         */
		if (this.sbmlCompatible)
		{
		    WriteParameterFile_SBML.writeSimParameterFiles(this.paramsMetaDataFilePath,
			    parameterValMap, XMLFileUtilities.parametersAnalysed,
			    XMLFileUtilities.parameterType, this.paramFileOutputFolder, i, "",
			    "paramFile" + (i + 1) + ".xml");
		}
		else
		{
		    WriteParameterFile.writeSimParameterFiles(this.paramsMetaDataFilePath,
			    parameterValMap, XMLFileUtilities.parametersAnalysed,
			    XMLFileUtilities.parameterType, this.paramFileOutputFolder, i, "");
		}
	    }

	    br.close();

	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }
}
